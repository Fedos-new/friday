{"version":3,"sources":["components/common/Menu/Menu.module.css","components/login/Login.module.css","components/registration/Registration.module.css","components/header/Header.module.css","components/common/SuperInputText/SuperInputText.module.css","components/common/Modal/Modal.module.css","components/common/SuperButton/SuperButton.module.css","components/newPassword/NewPassword.module.css","components/passwordRecovery/PasswordRecovery.module.css","components/common/SuperCheckbox/SuperCheckbox.module.css","components/common/Preloader/Preloader.module.css","components/common/SuperInputText/SuperInputText.tsx","components/common/SuperButton/SuperButton.tsx","components/common/SuperCheckbox/SuperCheckbox.tsx","dal/LoginAPI.ts","bll/app-reducer.ts","bll/login-reducer.ts","components/assets/preloader.svg","components/common/Preloader/Preloader.tsx","components/login/Login.tsx","components/login/LoginContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","components/test/Test.tsx","dal/RegistrationAPI.ts","bll/registration-reducer.ts","components/registration/Registration.tsx","components/registration/RegistrationContainer.tsx","components/error404/Error404.tsx","components/common/Loader/Loader.tsx","dal/NewPasswordAPI.ts","bll/newPassword-reducer.ts","dal/PasswordRecoveryAPI.ts","bll/recoveryPassword-reducer.ts","components/newPassword/NewPassword.tsx","components/newPassword/NewPasswordContainer.tsx","components/passwordRecovery/PasswordRecovery.tsx","components/passwordRecovery/PasswordRecoveryContainer.tsx","components/Routes.tsx","components/common/Modal/Modal.tsx","components/common/Menu/Menu.tsx","components/header/Header.tsx","App.tsx","reportWebVitals.ts","bll/profile-reducer.ts","bll/store.ts","index.tsx"],"names":["module","exports","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","setError","className","spanClassName","restProps","finalInputClassName","s","errorInput","superInput","e","currentTarget","value","key","SuperButton","red","finalClassName","default","SuperCheckbox","onChangeChecked","children","checkbox","checked","instance","axios","create","baseURL","withCredentials","authAPI","parameters","post","SET_STATUS","SET_ERROR","initialState","status","setAppStatusAC","setAppErrorAC","SET_IS_LOGGED_IN","isLoggedIn","loginTC","data","dispatch","then","res","catch","rej","response","Preloader","alt","style","preload","src","preloader","Login","props","serverError","useState","disable","setDisable","useDispatch","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","onSubmit","wrap","handleSubmit","formLogin","placeholder","id","getFieldProps","touched","disabled","link","to","PATH","RECOVERY_PASSWORD","REGISTRATION","LoginContainer","useSelector","state","auth","app","PROFILE","Profile","ProfileContainer","Test","registrationAPI","ADD_NEW_USER","isRegistration","registrationTC","Registration","checkPassword","wrapper","formRegistration","label","LOGIN","RegistrationContainer","registration","Error404","Loader","newPasswordAPI","newPassword","token","resetPasswordToken","SET_SUCCESS","success","sendNewPasswordTC","message","err","setErrorAC","passwordRecoveryAPI","from","NewPassword","setPassword","confirmedPassword","setConfirmedPassword","setDisabled","matchError","setMatchError","useParams","onClickButtonHandler","box","event","onClick","newPassBtn","NewPasswordContainer","recoveryPassword","PasswordRecovery","setEmail","console","log","sendEmailTC","recoveryBtn","PasswordRecoveryContainer","ERROR_404","NEW_PASSWORD","TEST","Routes","path","exact","render","Modal","activeModal","setActiveModal","modalActive","modal","modalContent","btnClose","Menu","wrapLink","Header","active","setActive","styleH","btnMenu","btnMenuActive","nav","navActive","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","SET_USER_PROFILE","rootReducer","combineReducers","action","profile","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29f735c3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapLink\":\"Menu_wrapLink__e2BBn\",\"link\":\"Menu_link__3CBsq\",\"nav\":\"Menu_nav___0pzU\",\"navActive\":\"Menu_navActive__2JjmP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formLogin\":\"Login_formLogin__1BpGK\",\"link\":\"Login_link__q-AMr\",\"error\":\"Login_error__1qxBf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formRegistration\":\"Registration_formRegistration__2h4X2\",\"link\":\"Registration_link__2g5Zl\",\"error\":\"Registration_error__3LdZ2\",\"label\":\"Registration_label__3TDCt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Header_wrap___6iya\",\"nav\":\"Header_nav__1mzt6\",\"btnMenu\":\"Header_btnMenu__1-bfR\",\"btnMenuActive\":\"Header_btnMenuActive__2Y85z\",\"navActive\":\"Header_navActive__1ZL2Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"SuperInputText_errorInput__1c1ho\",\"superInput\":\"SuperInputText_superInput__tvKWa\",\"error\":\"SuperInputText_error__ECzLd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__Pn2EN\",\"modalActive\":\"Modal_modalActive__bLWpk\",\"btnClose\":\"Modal_btnClose__2Up33\",\"modalContent\":\"Modal_modalContent__3BblL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"SuperButton_red__3cLSb\",\"default\":\"SuperButton_default__3fGvg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"NewPassword_box__3uPkJ\",\"newPassBtn\":\"NewPassword_newPassBtn__hGgsh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"PasswordRecovery_box__bawp6\",\"recoveryBtn\":\"PasswordRecovery_recoveryBtn__3ZN32\",\"error\":\"PasswordRecovery_error__2zKnY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__2kSHS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preload\":\"Preloader_preload__2_9rl\"};","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\nimport s from \"./SuperInputText.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string | null | boolean\r\n    spanClassName?: string\r\n    setError?: (error: string) => void\r\n\r\n};\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n        setError,\r\n\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n        setError && setError('')\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n\r\n        e.key === \"Enter\" // если нажата кнопка Enter\r\n        && onEnter // и есть пропс onEnter\r\n        && onEnter(); // то вызвать его\r\n    }\r\n\r\n\r\n    const finalSpanClassName = `${s.error} ${''? '' : s.error}`;\r\n    const finalInputClassName = error ? s.errorInput : s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n\r\n            {/*{error && <span className={finalSpanClassName}>{error}</span>}*/}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperInputText;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./SuperButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children,\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`;\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    );\r\n}\r\n\r\nexport default SuperButton;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperCheckbox.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n\r\n\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={\"checkbox\"}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span >{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    );\r\n}\r\n\r\nexport default SuperCheckbox;\r\n","import axios from 'axios'\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    // baseURL: 'http://localhost:7542/2.0/',\r\n    withCredentials: true,\r\n\r\n})\r\n\r\n//api\r\nexport const authAPI = {\r\n    login(parameters: LoginParamsType) {\r\n        return instance.post('auth/login', parameters)\r\n    }\r\n}\r\n\r\n//type\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n}\r\n","const SET_STATUS = 'APP/SET-STATUS';\r\nconst SET_ERROR = 'APP/SET_ERROR';\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_STATUS:\r\n            return {...state, status: action.status}\r\n        case SET_ERROR:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: SET_STATUS, status} as const)\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport const setAppErrorAC = (error: RequestErrorType) => ({type: SET_ERROR, error} as const)\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type RequestErrorType = string | null\r\n\r\ntype InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: RequestErrorType\r\n}\r\n\r\ntype ActionsType = any","import {Dispatch} from 'redux'\r\nimport {authAPI, LoginParamsType} from \"../dal/LoginAPI\";\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\n\r\nconst SET_IS_LOGGED_IN = 'SET_IS_LOGGED_IN';\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_IS_LOGGED_IN:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.value\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: SET_IS_LOGGED_IN, value} as const)\r\n\r\n//thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(rej => {\r\n            dispatch(setAppErrorAC(rej.response.data.error))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\n\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType","export default __webpack_public_path__ + \"static/media/preloader.b78a56d2.svg\";","import React from 'react';\r\nimport preloader from '../../assets/preloader.svg'\r\nimport style from './Preloader.module.css'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img alt={\"Loading...\"} className={style.preload} src={preloader}/>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport style from './Login.module.css'\r\nimport SuperInputText from \"../common/SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../common/SuperCheckbox/SuperCheckbox\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {PATH} from \"../Routes\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {loginTC} from \"../../bll/login-reducer\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {useFormik} from \"formik\";\r\nimport {RequestErrorType, RequestStatusType} from \"../../bll/app-reducer\";\r\n\r\n\r\ntype LoginType = {\r\n    status: RequestStatusType\r\n    serverError: RequestErrorType\r\n}\r\n\r\nexport const Login = (props: LoginType) => {\r\n\r\n    const { status, serverError} = props\r\n    const [disable, setDisable] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n\r\n    type  FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n                setDisable(true)\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n                setDisable(true)\r\n            } else setDisable(false)\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    });\r\n\r\n    if (status === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.wrap}>\r\n            <h2>Login</h2>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div className={style.formLogin}>\r\n                    <SuperInputText placeholder='email'\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    {...formik.getFieldProps('email')}\r\n                                    error={serverError}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email\r\n                        ? (<div className={style.error}>{formik.errors.email}</div>)\r\n                        : null\r\n                    }\r\n                    <SuperInputText placeholder='password'\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    error={serverError}\r\n                                    {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.touched.password && formik.errors.password\r\n                        ? <div className={style.error}>{formik.errors.password}</div>\r\n                        : null\r\n                    }\r\n\r\n                    <SuperButton type={'submit'} disabled={disable}>Login</SuperButton>\r\n                    <label>Remember me\r\n                        <SuperCheckbox\r\n                            id=\"rememberMe\"\r\n                            type=\"rememberMe\"\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                    </label>\r\n                    {serverError ? <div className={style.error}>{serverError}</div> : null}\r\n                    <NavLink className={style.link} to={PATH.RECOVERY_PASSWORD}>Forgot password?</NavLink>\r\n                    <NavLink className={style.link} to={PATH.REGISTRATION}>Registration</NavLink>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {Login} from \"./Login\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../bll/store\";\r\nimport {RequestErrorType, RequestStatusType} from \"../../bll/app-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes\";\r\n\r\n\r\nexport const LoginContainer = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n    const status = useSelector<AppRootState, RequestStatusType>(state => state.app.status)\r\n    const serverError = useSelector<AppRootState, RequestErrorType>(state => state.app.error)\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n            <Login\r\n                status={status}\r\n                serverError={serverError}\r\n            />\r\n\r\n    );\r\n}\r\n","import React from 'react';\n\n\nexport const Profile = () => {\n  return (\n    <div>\n        <h2>Profile</h2>\n    </div>\n  );\n}\n","import React from 'react';\nimport {Profile} from \"./Profile\";\n\n\nexport const ProfileContainer = () => {\n  return (\n    <div>\n      <Profile/>\n    </div>\n  );\n}\n","import React from 'react';\nimport SuperInputText from \"../common/SuperInputText/SuperInputText\";\nimport SuperButton from \"../common/SuperButton/SuperButton\";\nimport SuperCheckbox from \"../common/SuperCheckbox/SuperCheckbox\";\n\n\nexport const Test = () => {\n  return (\n    <div>\n      <SuperButton>Button</SuperButton>\n      <SuperInputText/>\n      <SuperCheckbox/>\n\n    </div>\n  );\n}\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n\t// baseURL: 'http://localhost:7542/2.0/',\r\n\twithCredentials: true\r\n})\r\n\r\n//api\r\nexport const registrationAPI = {\r\n\tregistration(parameters:RegistrationParamsType ) {\r\n\t\treturn instance.post('auth/register',parameters)\r\n\t}\r\n}\r\n\r\n//type\r\nexport type RegistrationParamsType = {\r\n\temail: string\r\n\tpassword: string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {registrationAPI, RegistrationParamsType} from \"../dal/RegistrationAPI\";\r\n\r\nconst ADD_NEW_USER = 'addUserAC';\r\n\r\nconst initialState: InitialStateType = {\r\n    isRegistration: false\r\n}\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_NEW_USER:\r\n            return {\r\n               ...state,\r\n                isRegistration: action.isRegistration\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const addUserAC = (isRegistration: boolean) =>({type: ADD_NEW_USER, isRegistration} as const)\r\n\r\n//thunks\r\n\r\nexport const registrationTC = (data: RegistrationParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    registrationAPI.registration(data)\r\n        .then(res => {\r\n            dispatch(addUserAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n\r\n        })\r\n        .catch(rej => {\r\n            dispatch(setAppErrorAC(rej.response.data.error))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\n\r\nexport type ActionsType = ReturnType<typeof addUserAC>\r\n    |SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n\r\n\r\ntype InitialStateType = {\r\n    isRegistration: boolean\r\n}","import React, {useState} from 'react';\r\nimport style from './Registration.module.css';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch} from 'react-redux';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {RequestErrorType, RequestStatusType} from \"../../bll/app-reducer\";\r\nimport {PATH} from \"../Routes\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport SuperInputText from \"../common/SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\nimport {registrationTC} from \"../../bll/registration-reducer\";\r\n\r\ntype RegisterType = {\r\n    status: RequestStatusType\r\n    serverError: RequestErrorType\r\n}\r\n\r\nexport const Registration = (props: RegisterType) => {\r\n\r\n    const {status, serverError} = props\r\n    const [disable, setDisable] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    type  FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        checkPassword?: string\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            checkPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n                setDisable(true)\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n                setDisable(true)\r\n            } else setDisable(false)\r\n            if (!values.checkPassword) {\r\n                errors.checkPassword = 'Password is required';\r\n                setDisable(true)\r\n            } else setDisable(false)\r\n            if (values.password !== values.checkPassword) {\r\n                errors.checkPassword = 'Passwords are not equal';\r\n                setDisable(true)\r\n            } else setDisable(false)\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(registrationTC(values))\r\n\r\n        }\r\n    })\r\n\r\n    if (status === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.wrapper}>\r\n            <h2>Registration</h2>\r\n            <p>Please fill the form for registration</p>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div className={style.formRegistration}>\r\n                    <SuperInputText placeholder=\"email\"\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    {...formik.getFieldProps('email')}\r\n                                    error={serverError}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email\r\n                        ? (<div className={style.error}>{formik.errors.email}</div>)\r\n                        : null\r\n                    }\r\n                    <SuperInputText placeholder=\"password\"\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    error={serverError}\r\n                                    {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.touched.password && formik.errors.password\r\n                        ? <div className={style.error}>{formik.errors.password}</div>\r\n                        : null\r\n                    }\r\n                    <SuperInputText placeholder=\"confirm password\"\r\n                                    id=\"checkPassword\"\r\n                                    type=\"password\"\r\n                                    error={serverError}\r\n                                    {...formik.getFieldProps('checkPassword')}\r\n                    />\r\n                    <label className={style.label}>password length must be at least 8 characters</label>\r\n                    <SuperButton type={'submit'} disabled={disable}>Registration</SuperButton>\r\n                    {serverError ? <div className={style.error}>{serverError}</div> : null}\r\n                    <NavLink className={style.link} to={PATH.LOGIN}>Login page</NavLink>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport {Registration} from \"./Registration\";\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootState} from '../../bll/store'\r\nimport {RequestErrorType, RequestStatusType} from \"../../bll/app-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes\";\r\n\r\nexport const RegistrationContainer = () => {\r\n\r\n    const status = useSelector<AppRootState, RequestStatusType>(state => state.app.status)\r\n    const serverError = useSelector<AppRootState, RequestErrorType>(state => state.app.error)\r\n    const isRegistration = useSelector<AppRootState, boolean>(state => state.registration.isRegistration)\r\n\r\n    if (isRegistration) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n        <Registration\r\n            serverError={serverError}\r\n            status={status}\r\n        />\r\n    );\r\n}\r\n","import React from 'react';\n\n\nexport const Error404 = () => {\n  return (\n    <div>\n        Error404\n    </div>\n  );\n}\n","import React from 'react';\r\nimport './Loader.css';\r\n\r\nconst Loader = () => {\r\n\r\n\treturn (\r\n\t\t<div className=\"lds-ellipsis\">\r\n\t\t\t<div></div>\r\n\t\t\t<div></div>\r\n\t\t\t<div></div>\r\n\t\t\t<div></div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Loader","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n\t// baseURL: 'http://localhost:7542/2.0/',\r\n\twithCredentials: true\r\n})\r\n\r\n\r\nexport const newPasswordAPI = {\r\n\tsendNewPassword(newPassword: string, token: string | undefined) {\r\n\t\treturn instance.post('auth/set-new-password',\r\n\t\t\t{\r\n\t\t\t\tpassword: newPassword,\r\n\t\t\t\tresetPasswordToken: token\r\n\t\t})\r\n\t}\r\n}","import {Dispatch} from 'redux';\r\nimport {newPasswordAPI} from '../dal/NewPasswordAPI';\r\n\r\nconst SET_ERROR = 'SET_ERROR'\r\nconst SET_SUCCESS = 'SET_SUCCESS'\r\nconst SET_STATUS = 'SET_STATUS'\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = {\r\n\tstatus: RequestStatusType\r\n\terror: string\r\n\tsuccess: string\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n\tstatus: 'idle',\r\n\terror: '',\r\n\tsuccess: ''\r\n}\r\n\r\nexport const newPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_ERROR:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\terror: action.error\r\n\t\t\t}\r\n\t\tcase SET_STATUS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: action.status\r\n\t\t\t}\r\n\t\tcase SET_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tsuccess: action.success\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n// actions\r\nexport const setErrorAC = (error: string) => {\r\n\treturn {\r\n\t\ttype: SET_ERROR,\r\n\t\terror\r\n\t} as const\r\n}\r\n\r\nexport const setSuccessAC = (success: string) => {\r\n\treturn {\r\n\t\ttype: SET_SUCCESS,\r\n\t\tsuccess\r\n\t} as const\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n\treturn {\r\n\t\ttype: SET_STATUS,\r\n\t\tstatus\r\n\t} as const\r\n}\r\n\r\n\r\n//thunks\r\nexport const sendNewPasswordTC = (newPassword: string, token: string) => (dispatch: Dispatch) => {\r\n\tdispatch(setAppStatusAC('loading'))\r\n\tnewPasswordAPI.sendNewPassword(newPassword, token)\r\n\t\t.then(res => {\r\n\t\t\tdispatch(setSuccessAC(res.data.message))\r\n\t\t\tdispatch(setAppStatusAC('succeeded'))\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tconst error = err.response\r\n\t\t\t\t? err.response.data.error\r\n\t\t\t\t: (err.message + ', more details in the console')\r\n\t\t\tdispatch(setErrorAC(error))\r\n\t\t\tdispatch(setAppStatusAC('failed'))\r\n\t\t})\r\n}\r\n\r\n\r\ntype setErrorACType = ReturnType<typeof setErrorAC>\r\ntype setSuccessACType = ReturnType<typeof setSuccessAC>\r\ntype setAppStatusACType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType = setErrorACType | setSuccessACType | setAppStatusACType","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n\t// baseURL: 'http://localhost:7542/2.0/',\r\n\twithCredentials: true\r\n})\r\n\r\n\r\nexport const passwordRecoveryAPI = {\r\n\tsendEmail(email: string) {\r\n\t\treturn instance.post('auth/forgot',\r\n\t\t\t{\r\n\t\t\t\temail: email,\r\n\t\t\t\tfrom: 'mariya.syrokvash@yandex.ru',\r\n\t\t\t\tmessage: `<div style=\"background-color: lime; padding: 15px\">\r\n\t\t\t\t\t\t\t\t\t\t<p>Please, click on the link and enter a new password</p>\r\n\t\t\t\t\t\t\t\t\t\t<a href='https://fedos-new.github.io/friday/#/new_pass/$token$'>Recovery password</a>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t`\r\n\t\t\t})\r\n\t}\r\n}","import {Dispatch} from 'redux';\r\nimport {passwordRecoveryAPI} from '../dal/PasswordRecoveryAPI';\r\n\r\nconst SET_ERROR = 'SET_ERROR'\r\nconst SET_SUCCESS = 'SET_SUCCESS'\r\nconst SET_STATUS = 'SET_STATUS'\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = {\r\n\tstatus: RequestStatusType\r\n\terror: string\r\n\tsuccess: string\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n\tstatus: 'idle',\r\n\terror: '',\r\n\tsuccess: ''\r\n}\r\n\r\nexport const recoveryPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_STATUS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: action.status\r\n\t\t\t}\r\n\t\tcase SET_ERROR:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\terror: action.error\r\n\t\t\t}\r\n\t\tcase SET_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tsuccess: action.success\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n// actions\r\nexport const setErrorAC = (error: string) => {\r\n\treturn {\r\n\t\ttype: SET_ERROR,\r\n\t\terror\r\n\t} as const\r\n}\r\n\r\nexport const setSuccessAC = (success: string) => {\r\n\treturn {\r\n\t\ttype: SET_SUCCESS,\r\n\t\tsuccess\r\n\t} as const\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n\treturn {\r\n\t\ttype: SET_STATUS,\r\n\t\tstatus\r\n\t} as const\r\n}\r\n\r\n\r\n//thunks\r\nexport const sendEmailTC = (email: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n\tpasswordRecoveryAPI.sendEmail(email)\r\n\t\t.then(res => {\r\n\t\t\tconsole.log(res)\r\n\t\t\tdebugger\r\n\t\t\tif (res.status === 200) {\r\n        // dispatch(setSuccessAC(res.data.info))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      }\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tconst error = err.response\r\n\t\t\t\t? err.response.data.error\r\n\t\t\t\t: (err.message + ', more details in the console')\r\n\t\t\tdispatch(setErrorAC(error))\r\n      dispatch(setAppStatusAC('failed'))\r\n\t\t})\r\n}\r\n\r\ntype setErrorACType = ReturnType<typeof setErrorAC>\r\ntype setSuccessACType = ReturnType<typeof setSuccessAC>\r\ntype setAppStatusACType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType = setErrorACType | setSuccessACType | setAppStatusACType","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from './NewPassword.module.css'\r\nimport SuperInputText from '../common/SuperInputText/SuperInputText';\r\nimport SuperButton from '../common/SuperButton/SuperButton';\r\nimport {useDispatch} from 'react-redux';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport Loader from '../common/Loader/Loader';\r\nimport {sendNewPasswordTC} from '../../bll/newPassword-reducer';\r\nimport {RequestStatusType, setErrorAC} from '../../bll/recoveryPassword-reducer';\r\nimport {PATH} from '../Routes';\r\n\r\ntype NewPasswordType = {\r\n\terror: string\r\n\tsuccess: string\r\n\tstatus: RequestStatusType\r\n}\r\n\r\ntype ParamTypes = {\r\n\ttoken: string\r\n}\r\n\r\nexport const NewPassword = (props: NewPasswordType) => {\r\n\tconst [password, setPassword] = useState<string>('')\r\n\tconst [confirmedPassword, setConfirmedPassword] = useState<string>('')\r\n\tconst [disabled, setDisabled] = useState<boolean>(true)\r\n\tconst [matchError, setMatchError] = useState<boolean>(false)\r\n\tconst dispatch = useDispatch();\r\n\tconst {token} = useParams<ParamTypes>()\r\n\r\n\tconst onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetDisabled(false)\r\n\t\tsetMatchError(false)\r\n\t\tevent.currentTarget.value && setPassword(event.currentTarget.value)\r\n\t\tdispatch(setErrorAC(''))\r\n\t}\r\n\r\n\tconst onChangeInputConfirmedHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetMatchError(false)\r\n\t\tevent.currentTarget.value && setConfirmedPassword(event.currentTarget.value)\r\n\t}\r\n\r\n\tconst onClickButtonHandler = () => {\r\n\t\tif (password !== confirmedPassword) {\r\n\t\t\treturn setMatchError(true)\r\n\t\t}\r\n\r\n\t\tdispatch(sendNewPasswordTC(password, token))\r\n\t\tsetDisabled(true)\r\n\t\tsetPassword('')\r\n\t\tsetConfirmedPassword('')\r\n\t}\r\n\r\n\tconst onEnter = () => {\r\n\t\tif (!props.error) {\r\n\t\t\tonClickButtonHandler()\r\n\t\t}\r\n\t}\r\n\r\n\tconst onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => e.key === 'Enter' && onEnter();\r\n\r\n\tif (props.status === 'loading') {\r\n\t\treturn <Loader/>\r\n\t}\r\n\r\n\tif (props.success) {\r\n\t\treturn <Redirect to={PATH.LOGIN}/>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={s.box}>\r\n\t\t\t<h2>New password</h2>\r\n\t\t\t<SuperInputText placeholder='New password' value={password} onChange={onChangeInputHandler}\r\n\t\t\t\t\t\t\t\t\t\t\terror={props.error} onKeyPress={onKeyPressHandler} type='password'/>\r\n\t\t\t{\r\n\t\t\t\tprops.error &&\r\n        <>\r\n          <SuperInputText placeholder='Confirm password' value={confirmedPassword} error={props.error}\r\n                          onChange={onChangeInputConfirmedHandler} type='password'/>\r\n\t\t\t\t\t{matchError ? 'Passwords don\\'t match!' : ''}\r\n        </>\r\n\t\t\t}\r\n\t\t\t<SuperButton disabled={disabled} onClick={onClickButtonHandler} className={s.newPassBtn}>Save</SuperButton>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport {NewPassword} from \"./NewPassword\";\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootState} from '../../bll/store';\r\nimport {RequestStatusType} from '../../bll/recoveryPassword-reducer';\r\n\r\nexport const NewPasswordContainer = () => {\r\n  const error = useSelector<AppRootState, string>((state) => state.recoveryPassword.error)\r\n  const success = useSelector<AppRootState, string>((state) => state.recoveryPassword.success)\r\n  const status = useSelector<AppRootState, RequestStatusType>((state) => state.recoveryPassword.status)\r\n\r\n  return (\r\n    <div>\r\n      <NewPassword error={error} success={success} status={status}/>\r\n    </div>\r\n  );\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport SuperInputText from '../common/SuperInputText/SuperInputText';\r\nimport SuperButton from '../common/SuperButton/SuperButton';\r\nimport s from './PasswordRecovery.module.css';\r\nimport {useDispatch} from 'react-redux';\r\nimport {RequestStatusType, sendEmailTC, setErrorAC} from '../../bll/recoveryPassword-reducer';\r\nimport Loader from '../common/Loader/Loader';\r\n\r\ntype PasswordRecoveryType = {\r\n\terror: string\r\n\tsuccess: string\r\n\tstatus: RequestStatusType\r\n}\r\n\r\nexport const PasswordRecovery = (props: PasswordRecoveryType) => {\r\n\tconst [email, setEmail] = useState<string>('')\r\n\tconst [disabled, setDisabled] = useState<boolean>(true)\r\n\tconst dispatch = useDispatch();\r\n\r\n\r\n\tconst onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetDisabled(false)\r\n\t\tevent.currentTarget.value && setEmail(event.currentTarget.value)\r\n\t\tdispatch(setErrorAC(''))\r\n\t}\r\n\r\n\tconst onClickButtonHandler = () => {\r\n\t\tdispatch(sendEmailTC(email))\r\n\t\tsetDisabled(true)\r\n\t\tsetEmail('')\r\n\t}\r\n\r\n\tconst onEnter = () => {\r\n\t\tif (!props.error) {\r\n\t\t\tonClickButtonHandler()\r\n\t\t}\r\n\t}\r\n\r\n\tconst onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => e.key === 'Enter' && onEnter();\r\n\r\n\tif (props.status === 'loading') {\r\n\t\treturn <Loader/>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={s.box}>\r\n\t\t\t{\r\n\t\t\t\tprops.success ?\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<p>Success! The message was {props.success}</p>\r\n\t\t\t\t\t\t<p>Please, check your email.</p>\r\n\t\t\t\t\t</>\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<h2>Recover Password</h2>\r\n\t\t\t\t\t\t<SuperInputText placeholder='Email' value={email} onKeyPress={onKeyPressHandler} onChange={onChangeInputHandler} type='text' error={props.error}/>\r\n\t\t\t\t\t\t<SuperButton onClick={onClickButtonHandler} disabled={disabled}\r\n\t\t\t\t\t\t\t\t\t\t\t\t className={s.recoveryBtn}> Send </SuperButton>\r\n\t\t\t\t\t</>\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport {PasswordRecovery} from \"./PasswordRecovery\";\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootState} from '../../bll/store';\r\nimport {RequestStatusType} from '../../bll/recoveryPassword-reducer';\r\n\r\n\r\nexport const PasswordRecoveryContainer = () => {\r\n  const error = useSelector<AppRootState, string>((state) => state.recoveryPassword.error)\r\n  const success = useSelector<AppRootState, string>((state) => state.recoveryPassword.success)\r\n  const status = useSelector<AppRootState, RequestStatusType>((state) => state.recoveryPassword.status)\r\n\r\n  return (\r\n    <div>\r\n      <PasswordRecovery error={error} success={success} status={status}/>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {Redirect, Route, Switch } from 'react-router-dom';\r\nimport { LoginContainer } from \"./login/LoginContainer\";\r\nimport {ProfileContainer} from \"./profile/ProfileContainer\";\r\nimport {Test} from \"./test/Test\";\r\nimport {RegistrationContainer} from \"./registration/RegistrationContainer\";\r\nimport {Error404} from \"./error404/Error404\";\r\nimport {NewPasswordContainer} from \"./newPassword/NewPasswordContainer\";\r\nimport {PasswordRecoveryContainer} from \"./passwordRecovery/PasswordRecoveryContainer\";\r\n\r\n\r\nexport const PATH = {\r\n    LOGIN:'/login',\r\n    REGISTRATION:'/reg',\r\n    PROFILE:'/profile',\r\n    ERROR_404:'/404',\r\n    RECOVERY_PASSWORD:'/rec_pass',\r\n    NEW_PASSWORD:'/new_pass',\r\n    TEST:'/test',\r\n}\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path={\"/\"} exact render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <LoginContainer/>}/>\r\n                <Route path={PATH.REGISTRATION} render={() => <RegistrationContainer/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <ProfileContainer/>}/>\r\n                <Route path={PATH.ERROR_404} render={() => <Error404/>}/>\r\n                <Route path={PATH.RECOVERY_PASSWORD} render={() => <PasswordRecoveryContainer/>}/>\r\n                <Route path={PATH.NEW_PASSWORD} render={() => <NewPasswordContainer/>}/>\r\n                <Route path={PATH.TEST} render={() => <Test/>}/>\r\n                <Route render={() => <Error404/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './Modal.module.css'\r\nimport SuperButton from \"../SuperButton/SuperButton\";\r\n\r\n\r\ntype ModalType = {\r\n    activeModal: boolean\r\n    setActiveModal: (activeModal: boolean) => void\r\n    children: any\r\n}\r\n\r\n\r\nexport const Modal = (props: ModalType) => {\r\n    const {activeModal, setActiveModal, children} = props\r\n\r\n    return (\r\n        <div className={activeModal ? style.modalActive : style.modal}>\r\n            <div className={style.modalContent}>\r\n                {children}\r\n                <SuperButton red\r\n                             type={\"button\"}\r\n                             onClick={() => setActiveModal(false)}\r\n                             className={style.btnClose}>\r\n                    x\r\n                </SuperButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../Routes\";\r\nimport style from \"./Menu.module.css\"\r\n\r\ntype MenuType = {\r\n    className: string | undefined\r\n}\r\n\r\nexport const Menu: React.FC<MenuType> = ({className}) => {\r\n\r\n    return (\r\n        <div className={`${className}`}>\r\n            <div className={style.wrapLink}>\r\n                <NavLink className={style.link} to={PATH.REGISTRATION}>Registration</NavLink>\r\n            </div>\r\n            <div className={style.wrapLink}>\r\n                <NavLink className={style.link} to={PATH.LOGIN}>Login</NavLink>\r\n            </div>\r\n            <div className={style.wrapLink}>\r\n                <NavLink className={style.link} to={PATH.PROFILE}>Profile</NavLink>\r\n            </div>\r\n            <div className={style.wrapLink}>\r\n                <NavLink className={style.link} to={PATH.RECOVERY_PASSWORD}>Recovery Password</NavLink>\r\n            </div>\r\n            <div className={style.wrapLink}>\r\n                <NavLink className={style.link} to={PATH.NEW_PASSWORD}>NewPassword</NavLink>\r\n            </div>\r\n            <div className={style.wrapLink}>\r\n                {/*<NavLink className={style.link} to={PATH.TEST}>Test</NavLink>*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport styleH from \"../header/Header.module.css\"\r\nimport {Modal} from \"../common/Modal/Modal\";\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\nimport { Menu } from '../common/Menu/Menu';\r\n\r\n\r\nexport const Header: React.FC = () => {\r\n\r\n    const [active, setActive] = useState(false)\r\n\r\n    return (\r\n        <div className={styleH.wrap}>\r\n            <SuperButton className={active ? styleH.btnMenu : styleH.btnMenuActive}\r\n                         onClick={() => setActive(true)}>\r\n                Menu\r\n            </SuperButton>\r\n            {!active && <Menu className={styleH.nav}/>}\r\n\r\n\r\n            {active &&   <Modal activeModal={active} setActiveModal={setActive}>\r\n                <Menu className={styleH.navActive}/>\r\n                </Modal>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Routes} from \"./components/Routes\";\r\nimport {Header} from \"./components/header/Header\";\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Routes/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\n\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\n\r\ntype InitialStateType = {\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_PROFILE:\r\n            return {...state}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\n//thunks\r\n\r\n\r\n\r\n\r\ntype ActionsType = any","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {loginReducer} from \"./login-reducer\";\r\nimport { newPasswordReducer } from \"./newPassword-reducer\";\r\nimport { profileReducer } from \"./profile-reducer\";\r\nimport { recoveryPasswordReducer} from \"./recoveryPassword-reducer\";\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    auth : loginReducer,\r\n    profile: profileReducer,\r\n    recoveryPassword: recoveryPasswordReducer,\r\n    newPassword: newPasswordReducer,\r\n    registration: registrationReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer> //автомачически подтягивает типы из combineReducers\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./bll/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}